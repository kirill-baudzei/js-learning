// ООП
// Основы объектно-ориентированного программирования (ООП) в JavaScript включают несколько ключевых концепций:

// 1. Классы и объекты
// Классы — это шаблоны для создания объектов. Они описывают, какие свойства и методы должен иметь объект.
// Объекты — это экземпляры классов.
class Car {
    constructor(model, year) {
        this.model = model;
        this.year = year;
    }
    
    getInfo() {
        return `Model: ${this.model}, Year: ${this.year}`;
    }
}

const myCar = new Car('Toyota', 2020);
console.log(myCar.getInfo());  // Model: Toyota, Year: 2020


// 2. Инкапсуляция
// Инкапсуляция заключается в скрытии внутренней реализации объектов и предоставлении интерфейсов для взаимодействия.
// В ES6 нет прямой поддержки "частных" полей, но их можно имитировать через символы или соглашения о наименованиях 
// (например, с _ перед именем свойства).


// 3. Наследование
// Наследование позволяет создавать классы на основе других классов. 
// Наследуемый класс может использовать методы и свойства родительского класса.
class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        return `${this.name} makes a noise.`;
    }
}

class Dog extends Animal {
    speak() {
        return `${this.name} barks.`;
    }
}

const myDog = new Dog('Buddy');
console.log(myDog.speak());  // Buddy barks.


// 4. Полиморфизм
// Полиморфизм позволяет методам с одинаковым названием вести себя по-разному в зависимости от того, в каком классе они находятся.
class Animal {
    speak() {
        return 'Animal sound';
    }
}

class Cat extends Animal {
    speak() {
        return 'Meow';
    }
}

const myCat = new Cat();
console.log(myCat.speak());  // Meow


// 5. Абстракция
// Абстракция — это выделение только значимых характеристик объекта и скрытие деталей реализации. 
// В JavaScript абстракция достигается через методы классов.


// 6. Прототипное наследование
// JavaScript использует прототипное наследование, где объекты могут наследовать свойства и методы друг у друга через цепочку прототипов.